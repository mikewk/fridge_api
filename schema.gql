schema {
    mutation: Mutation
    query: Query
}

type User
{
    id: Int!
    name: String!
    email: String
}

type Household
{
    id: Int!
    name: String!
    location: String!
    owner: User!
    storages: [Storage]
    users: [User]
}

type Storage
{
    id: Int!
    name: String!
    type: String!
    foodItems: [FoodItem]
}

type FoodItem
{
    id: Int!
    name: String!
    storageId: Int
    enteredBy: User!
    entered: String
    expiration: String
    tags: [FoodTags]
}

type FoodTags
{
    id: Int!
    tag: String!
}

type Invite
{
    id: Int!
    householdName: String!
    inviter: User!
    invitee: User!
    message: String!
    status: Int!
}

type InvitesPayload
{
    invites: [Invite]
    error: String
}

type AuthPayload
{
    token: String
    error: String
}

type HouseholdsPayload
{
    households: [Household]
    error: String
}

type StoragesPayload
{
    storages: [Storage]
    error: String
}

type UsersPayload
{
    users: [User]
    error: String
}

type FoodItemsPayload
{
    foodItems: [FoodItem]
    error: String
}

type RemovalPayload
{
    success: Int!
    error: String
}

type Mutation {
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    
    createHousehold(name: String!, location: String!) : HouseholdsPayload
    updateHousehold(name: String, location: String, householdId:Int!) : HouseholdsPayload
    
    addStorageToHousehold(name: String!, storageType: String!, householdId: Int!) : StoragesPayload
    updateStorage(name: String, storageType:String, storageId: Int!): StoragesPayload
    
    addFoodItemToStorage(name: String!, storageId: Int!, expiration: String, tags: [String], entered: String): FoodItemsPayload
    updateFoodItem(foodItemId: Int! name:, String expiration: String): FoodItemsPayload
    addTagsToFoodItem(tags: [String]!, foodItemId: Int!): FoodItemsPayload
    removeTagsFromFoodItem(tags: [String]!, foodItemId: Int!): FoodItemsPayload
    moveFoodItemToStorage(foodItemId: Int!, storageId: Int!): FoodItemsPayload
    
    inviteUserToHousehold(userId: Int!, householdId: Int!): InvitesPayload
    acceptHouseholdInvite(inviteId: Int!) : HouseholdsPayload
    rejectHouseholdInvite(inviteId: Int!) : RemovalPayload

    removeFoodItem(foodItemId: Int!) : RemovalPayload
    removeStorage(storageId: Int!) : RemovalPayload
    removeHousehold(householdId: Int!): RemovalPayload
    removeUserFromHousehold(userId: Int!, householdId: Int!): RemovalPayload
}

type Query {
    getOwnedHouseholds : HouseholdsPayload
    getMemberHouseholds: HouseholdsPayload
    getHouseholdInvites : InvitesPayload
    getStorages(householdId: Int!): StoragesPayload
    getFoodItemsInStorage(storageId: Int!, tagFilter:String): FoodItemsPayload
    getFoodItemsInHousehold(householdId: Int!, tagFilter:String): FoodItemsPayload
    getHouseholdMembers(householdID: Int!) : UsersPayload
    
}